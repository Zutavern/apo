-- Erstelle die daily_forecast Tabelle
CREATE TABLE daily_forecast (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    location_id BIGINT NOT NULL REFERENCES locations(id),
    forecast_date DATE NOT NULL,
    temperature_min DECIMAL(4,1) NOT NULL,
    temperature_max DECIMAL(4,1) NOT NULL,
    precipitation_sum DECIMAL(5,1) NOT NULL DEFAULT 0,
    precipitation_probability INTEGER NOT NULL DEFAULT 0,
    weather_code INTEGER NOT NULL DEFAULT 0,
    wind_speed_max DECIMAL(4,1) NOT NULL,
    wind_gusts_max DECIMAL(4,1),
    wind_direction_dominant INTEGER,
    sunrise TIMESTAMP WITH TIME ZONE NOT NULL,
    sunset TIMESTAMP WITH TIME ZONE NOT NULL,
    uv_index_max DECIMAL(3,1) DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
    CONSTRAINT daily_forecast_location_date_key UNIQUE (location_id, forecast_date)
);

-- Trigger f√ºr automatische Aktualisierung von updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = TIMEZONE('utc'::text, NOW());
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER set_updated_at
    BEFORE UPDATE ON daily_forecast
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column(); 