-- Erstelle enum Typen für verschiedene Status
CREATE TYPE weather_severity AS ENUM ('Minor', 'Moderate', 'Severe', 'Extreme');
CREATE TYPE pollen_level AS ENUM ('None', 'Low', 'Medium', 'High');
CREATE TYPE risk_level AS ENUM ('Low', 'Medium', 'High');

-- Locations Tabelle für verschiedene Standorte
CREATE TABLE locations (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    latitude DECIMAL(8,6) NOT NULL,
    longitude DECIMAL(9,6) NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
);

-- Aktuelle Wetterdaten
CREATE TABLE current_weather (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    location_id BIGINT REFERENCES locations(id) ON DELETE CASCADE,
    temperature DECIMAL(4,1) NOT NULL,
    feels_like DECIMAL(4,1) NOT NULL,
    humidity INTEGER NOT NULL,
    precipitation DECIMAL(5,2) NOT NULL,
    wind_speed DECIMAL(5,2) NOT NULL,
    weather_code INTEGER NOT NULL,
    is_day BOOLEAN NOT NULL,
    uv_index DECIMAL(3,1) NOT NULL,
    pressure DECIMAL(6,2) NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
);

-- Tägliche Vorhersage
CREATE TABLE daily_forecast (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    location_id BIGINT REFERENCES locations(id) ON DELETE CASCADE,
    forecast_date DATE NOT NULL,
    temp_min DECIMAL(4,1) NOT NULL,
    temp_max DECIMAL(4,1) NOT NULL,
    precipitation_sum DECIMAL(5,2) NOT NULL,
    weather_code INTEGER NOT NULL,
    sunrise TIMESTAMP WITH TIME ZONE NOT NULL,
    sunset TIMESTAMP WITH TIME ZONE NOT NULL,
    uv_index_max DECIMAL(3,1) NOT NULL,
    pressure_mean DECIMAL(6,2) NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
    UNIQUE(location_id, forecast_date)
);

-- Stündliche Vorhersage
CREATE TABLE hourly_forecast (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    location_id BIGINT REFERENCES locations(id) ON DELETE CASCADE,
    forecast_time TIMESTAMP WITH TIME ZONE NOT NULL,
    temperature DECIMAL(4,1) NOT NULL,
    humidity INTEGER NOT NULL,
    pressure DECIMAL(6,2) NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
    UNIQUE(location_id, forecast_time)
);

-- Pollendaten
CREATE TABLE pollen_data (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    location_id BIGINT REFERENCES locations(id) ON DELETE CASCADE,
    measurement_time TIMESTAMP WITH TIME ZONE NOT NULL,
    alder_level pollen_level NOT NULL,
    birch_level pollen_level NOT NULL,
    grass_level pollen_level NOT NULL,
    mugwort_level pollen_level NOT NULL,
    ragweed_level pollen_level NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
    UNIQUE(location_id, measurement_time)
);

-- Gesundheitsindizes
CREATE TABLE health_indices (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    location_id BIGINT REFERENCES locations(id) ON DELETE CASCADE,
    measurement_time TIMESTAMP WITH TIME ZONE NOT NULL,
    circulation_stress risk_level NOT NULL,
    headache_risk risk_level NOT NULL,
    joint_pain_risk risk_level NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
    UNIQUE(location_id, measurement_time)
);

-- Wetterwarnungen
CREATE TABLE weather_warnings (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    location_id BIGINT REFERENCES locations(id) ON DELETE CASCADE,
    event_type VARCHAR(255) NOT NULL,
    severity weather_severity NOT NULL,
    start_time TIMESTAMP WITH TIME ZONE NOT NULL,
    end_time TIMESTAMP WITH TIME ZONE NOT NULL,
    description TEXT NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
);

-- Trigger für automatic updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = TIMEZONE('utc'::text, NOW());
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Trigger für alle Tabellen
CREATE TRIGGER update_locations_updated_at
    BEFORE UPDATE ON locations
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_current_weather_updated_at
    BEFORE UPDATE ON current_weather
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_daily_forecast_updated_at
    BEFORE UPDATE ON daily_forecast
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_hourly_forecast_updated_at
    BEFORE UPDATE ON hourly_forecast
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_pollen_data_updated_at
    BEFORE UPDATE ON pollen_data
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_health_indices_updated_at
    BEFORE UPDATE ON health_indices
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_weather_warnings_updated_at
    BEFORE UPDATE ON weather_warnings
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- Initialer Standort für Hohenmölsen
INSERT INTO locations (name, latitude, longitude)
VALUES ('Hohenmölsen', 51.1667, 12.0833); 